// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsonstruct

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct(in *jlexer.Lexer, out *urlstr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "_content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct(out *jwriter.Writer, in urlstr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"_content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v urlstr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v urlstr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *urlstr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *urlstr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct1(in *jlexer.Lexer, out *tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "authorname":
			out.Authorname = string(in.String())
		case "_content":
			out.Content = string(in.String())
		case "raw":
			out.Raw = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct1(out *jwriter.Writer, in tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"authorname\":"
		out.RawString(prefix)
		out.String(string(in.Authorname))
	}
	{
		const prefix string = ",\"_content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"raw\":"
		out.RawString(prefix)
		out.String(string(in.Raw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct1(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nsid":
			out.Nsid = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nsid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Nsid))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct2(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct3(in *jlexer.Lexer, out *URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				in.Delim('[')
				if out.URL == nil {
					if !in.IsDelim(']') {
						out.URL = make([]urlstr, 0, 2)
					} else {
						out.URL = []urlstr{}
					}
				} else {
					out.URL = (out.URL)[:0]
				}
				for !in.IsDelim(']') {
					var v1 urlstr
					(v1).UnmarshalEasyJSON(in)
					out.URL = append(out.URL, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct3(out *jwriter.Writer, in URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		if in.URL == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.URL {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v URL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v URL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *URL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *URL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct3(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct4(in *jlexer.Lexer, out *Tags) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag":
			if in.IsNull() {
				in.Skip()
				out.Tag = nil
			} else {
				in.Delim('[')
				if out.Tag == nil {
					if !in.IsDelim(']') {
						out.Tag = make([]tag, 0, 1)
					} else {
						out.Tag = []tag{}
					}
				} else {
					out.Tag = (out.Tag)[:0]
				}
				for !in.IsDelim(']') {
					var v4 tag
					(v4).UnmarshalEasyJSON(in)
					out.Tag = append(out.Tag, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct4(out *jwriter.Writer, in Tags) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix[1:])
		if in.Tag == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tag {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tags) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tags) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tags) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tags) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct4(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct5(in *jlexer.Lexer, out *Place) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_content":
			out.Content = string(in.String())
		case "place_id":
			out.PlaceID = string(in.String())
		case "woeid":
			out.Woeid = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct5(out *jwriter.Writer, in Place) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"place_id\":"
		out.RawString(prefix)
		out.String(string(in.PlaceID))
	}
	{
		const prefix string = ",\"woeid\":"
		out.RawString(prefix)
		out.Int64(int64(in.Woeid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Place) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Place) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Place) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Place) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct5(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct6(in *jlexer.Lexer, out *PhotosetsGetPhotos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photoset":
			(out.Photoset).UnmarshalEasyJSON(in)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct6(out *jwriter.Writer, in PhotosetsGetPhotos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photoset\":"
		out.RawString(prefix[1:])
		(in.Photoset).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotosetsGetPhotos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotosetsGetPhotos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotosetsGetPhotos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotosetsGetPhotos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct6(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct7(in *jlexer.Lexer, out *PhotosetsGetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photoset":
			(out.Photoset).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct7(out *jwriter.Writer, in PhotosetsGetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photoset\":"
		out.RawString(prefix[1:])
		(in.Photoset).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotosetsGetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotosetsGetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotosetsGetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotosetsGetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct7(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct8(in *jlexer.Lexer, out *PhotosetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "primary":
			out.Primary = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "title":
			(out.Title).UnmarshalEasyJSON(in)
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		case "secret":
			out.Secret = string(in.String())
		case "server":
			out.Server = string(in.String())
		case "farm":
			out.Farm = int(in.Int())
		case "photos":
			out.Photos = int(in.Int())
		case "count_views":
			out.CountViews = string(in.String())
		case "count_comments":
			out.CountComment = string(in.String())
		case "count_photos":
			out.CountPhotos = string(in.String())
		case "count_videos":
			out.CountVideos = int(in.Int())
		case "can_comment":
			out.CanComment = int(in.Int())
		case "date_create":
			out.DateCreate = string(in.String())
		case "date_update":
			out.DateUpdate = string(in.String())
		case "coverphoto_server":
			out.CoverPhotoServer = string(in.String())
		case "coverphoto_farm":
			out.CoverPhotoFarm = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct8(out *jwriter.Writer, in PhotosetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"primary\":"
		out.RawString(prefix)
		out.String(string(in.Primary))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		(in.Title).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"farm\":"
		out.RawString(prefix)
		out.Int(int(in.Farm))
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		out.Int(int(in.Photos))
	}
	{
		const prefix string = ",\"count_views\":"
		out.RawString(prefix)
		out.String(string(in.CountViews))
	}
	{
		const prefix string = ",\"count_comments\":"
		out.RawString(prefix)
		out.String(string(in.CountComment))
	}
	{
		const prefix string = ",\"count_photos\":"
		out.RawString(prefix)
		out.String(string(in.CountPhotos))
	}
	{
		const prefix string = ",\"count_videos\":"
		out.RawString(prefix)
		out.Int(int(in.CountVideos))
	}
	{
		const prefix string = ",\"can_comment\":"
		out.RawString(prefix)
		out.Int(int(in.CanComment))
	}
	{
		const prefix string = ",\"date_create\":"
		out.RawString(prefix)
		out.String(string(in.DateCreate))
	}
	{
		const prefix string = ",\"date_update\":"
		out.RawString(prefix)
		out.String(string(in.DateUpdate))
	}
	{
		const prefix string = ",\"coverphoto_server\":"
		out.RawString(prefix)
		out.String(string(in.CoverPhotoServer))
	}
	{
		const prefix string = ",\"coverphoto_farm\":"
		out.RawString(prefix)
		out.Int(int(in.CoverPhotoFarm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotosetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotosetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotosetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotosetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct8(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct9(in *jlexer.Lexer, out *Photoset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "primary":
			out.Primary = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "ownername":
			out.Ownername = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "page":
			out.Page = string(in.String())
		case "pages":
			out.Pages = int64(in.Int64())
		case "perpage":
			out.Perpage = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make([]Photo, 0, 1)
					} else {
						out.Photo = []Photo{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Photo
					(v7).UnmarshalEasyJSON(in)
					out.Photo = append(out.Photo, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct9(out *jwriter.Writer, in Photoset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"primary\":"
		out.RawString(prefix)
		out.String(string(in.Primary))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"ownername\":"
		out.RawString(prefix)
		out.String(string(in.Ownername))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.String(string(in.Page))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int64(int64(in.Pages))
	}
	{
		const prefix string = ",\"perpage\":"
		out.RawString(prefix)
		out.Int64(int64(in.Perpage))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Photo {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Photoset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Photoset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Photoset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Photoset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct9(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct10(in *jlexer.Lexer, out *PhotosSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photos":
			easyjson1c889379Decode(in, &out.Photos)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct10(out *jwriter.Writer, in PhotosSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix[1:])
		easyjson1c889379Encode(out, in.Photos)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotosSearch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotosSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotosSearch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotosSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct10(l, v)
}
func easyjson1c889379Decode(in *jlexer.Lexer, out *struct {
	Page    int         `json:"page"`
	Pages   int         `json:"pages"`
	Perpage int         `json:"perpage"`
	Total   interface{} `json:"total"`
	Photo   []Photo     `json:"photo"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			out.Page = int(in.Int())
		case "pages":
			out.Pages = int(in.Int())
		case "perpage":
			out.Perpage = int(in.Int())
		case "total":
			if m, ok := out.Total.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Total.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Total = in.Interface()
			}
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make([]Photo, 0, 1)
					} else {
						out.Photo = []Photo{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Photo
					(v10).UnmarshalEasyJSON(in)
					out.Photo = append(out.Photo, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode(out *jwriter.Writer, in struct {
	Page    int         `json:"page"`
	Pages   int         `json:"pages"`
	Perpage int         `json:"perpage"`
	Total   interface{} `json:"total"`
	Photo   []Photo     `json:"photo"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int(int(in.Pages))
	}
	{
		const prefix string = ",\"perpage\":"
		out.RawString(prefix)
		out.Int(int(in.Perpage))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		if m, ok := in.Total.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Total.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Total))
		}
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Photo {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct11(in *jlexer.Lexer, out *PhotosLicenses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "licenses":
			easyjson1c889379Decode1(in, &out.Licenses)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct11(out *jwriter.Writer, in PhotosLicenses) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"licenses\":"
		out.RawString(prefix[1:])
		easyjson1c889379Encode1(out, in.Licenses)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotosLicenses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotosLicenses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotosLicenses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotosLicenses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct11(l, v)
}
func easyjson1c889379Decode1(in *jlexer.Lexer, out *struct {
	License []License `json:"license"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "license":
			if in.IsNull() {
				in.Skip()
				out.License = nil
			} else {
				in.Delim('[')
				if out.License == nil {
					if !in.IsDelim(']') {
						out.License = make([]License, 0, 1)
					} else {
						out.License = []License{}
					}
				} else {
					out.License = (out.License)[:0]
				}
				for !in.IsDelim(']') {
					var v13 License
					(v13).UnmarshalEasyJSON(in)
					out.License = append(out.License, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode1(out *jwriter.Writer, in struct {
	License []License `json:"license"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"license\":"
		out.RawString(prefix[1:])
		if in.License == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.License {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct12(in *jlexer.Lexer, out *PhotosGetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo":
			easyjson1c889379Decode2(in, &out.Photo)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct12(out *jwriter.Writer, in PhotosGetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix[1:])
		easyjson1c889379Encode2(out, in.Photo)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotosGetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotosGetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotosGetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotosGetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct12(l, v)
}
func easyjson1c889379Decode2(in *jlexer.Lexer, out *struct {
	ID           string   `json:"id"`
	Dateuploaded string   `json:"dateuploaded"`
	License      string   `json:"license"`
	Media        string   `json:"media"`
	Orgformat    string   `json:"originalformat"`
	Orgsecret    string   `json:"originalsecret"`
	Secret       string   `json:"secret"`
	Server       string   `json:"server"`
	Views        string   `json:"views"`
	Farm         int64    `json:"farm"`
	Rotation     int64    `json:"rotation"`
	Comments     Content  `json:"comments"`
	Description  Content  `json:"description"`
	Title        Content  `json:"title"`
	Tags         Tags     `json:"tags"`
	Urls         URL      `json:"urls"`
	Location     Location `json:"location"`
	Owner        struct {
		Iconfarm   int64  `json:"iconfarm"`
		Iconserver string `json:"iconserver"`
		Location   string `json:"location"`
		Nsid       string `json:"nsid"`
		PathAlias  string `json:"path_alias"`
		Realname   string `json:"realname"`
		Username   string `json:"username"`
	} `json:"owner"`
	Dates struct {
		Posted     string `json:"posted"`
		Taken      string `json:"taken"`
		Lastupdate string `json:"lastupdate"`
	} `json:"dates"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "dateuploaded":
			out.Dateuploaded = string(in.String())
		case "license":
			out.License = string(in.String())
		case "media":
			out.Media = string(in.String())
		case "originalformat":
			out.Orgformat = string(in.String())
		case "originalsecret":
			out.Orgsecret = string(in.String())
		case "secret":
			out.Secret = string(in.String())
		case "server":
			out.Server = string(in.String())
		case "views":
			out.Views = string(in.String())
		case "farm":
			out.Farm = int64(in.Int64())
		case "rotation":
			out.Rotation = int64(in.Int64())
		case "comments":
			(out.Comments).UnmarshalEasyJSON(in)
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		case "title":
			(out.Title).UnmarshalEasyJSON(in)
		case "tags":
			(out.Tags).UnmarshalEasyJSON(in)
		case "urls":
			(out.Urls).UnmarshalEasyJSON(in)
		case "location":
			(out.Location).UnmarshalEasyJSON(in)
		case "owner":
			easyjson1c889379Decode3(in, &out.Owner)
		case "dates":
			easyjson1c889379Decode4(in, &out.Dates)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode2(out *jwriter.Writer, in struct {
	ID           string   `json:"id"`
	Dateuploaded string   `json:"dateuploaded"`
	License      string   `json:"license"`
	Media        string   `json:"media"`
	Orgformat    string   `json:"originalformat"`
	Orgsecret    string   `json:"originalsecret"`
	Secret       string   `json:"secret"`
	Server       string   `json:"server"`
	Views        string   `json:"views"`
	Farm         int64    `json:"farm"`
	Rotation     int64    `json:"rotation"`
	Comments     Content  `json:"comments"`
	Description  Content  `json:"description"`
	Title        Content  `json:"title"`
	Tags         Tags     `json:"tags"`
	Urls         URL      `json:"urls"`
	Location     Location `json:"location"`
	Owner        struct {
		Iconfarm   int64  `json:"iconfarm"`
		Iconserver string `json:"iconserver"`
		Location   string `json:"location"`
		Nsid       string `json:"nsid"`
		PathAlias  string `json:"path_alias"`
		Realname   string `json:"realname"`
		Username   string `json:"username"`
	} `json:"owner"`
	Dates struct {
		Posted     string `json:"posted"`
		Taken      string `json:"taken"`
		Lastupdate string `json:"lastupdate"`
	} `json:"dates"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"dateuploaded\":"
		out.RawString(prefix)
		out.String(string(in.Dateuploaded))
	}
	{
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		out.String(string(in.License))
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		out.String(string(in.Media))
	}
	{
		const prefix string = ",\"originalformat\":"
		out.RawString(prefix)
		out.String(string(in.Orgformat))
	}
	{
		const prefix string = ",\"originalsecret\":"
		out.RawString(prefix)
		out.String(string(in.Orgsecret))
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.String(string(in.Views))
	}
	{
		const prefix string = ",\"farm\":"
		out.RawString(prefix)
		out.Int64(int64(in.Farm))
	}
	{
		const prefix string = ",\"rotation\":"
		out.RawString(prefix)
		out.Int64(int64(in.Rotation))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		(in.Comments).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		(in.Title).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		(in.Tags).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		(in.Urls).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		(in.Location).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		easyjson1c889379Encode3(out, in.Owner)
	}
	{
		const prefix string = ",\"dates\":"
		out.RawString(prefix)
		easyjson1c889379Encode4(out, in.Dates)
	}
	out.RawByte('}')
}
func easyjson1c889379Decode4(in *jlexer.Lexer, out *struct {
	Posted     string `json:"posted"`
	Taken      string `json:"taken"`
	Lastupdate string `json:"lastupdate"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "posted":
			out.Posted = string(in.String())
		case "taken":
			out.Taken = string(in.String())
		case "lastupdate":
			out.Lastupdate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode4(out *jwriter.Writer, in struct {
	Posted     string `json:"posted"`
	Taken      string `json:"taken"`
	Lastupdate string `json:"lastupdate"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"posted\":"
		out.RawString(prefix[1:])
		out.String(string(in.Posted))
	}
	{
		const prefix string = ",\"taken\":"
		out.RawString(prefix)
		out.String(string(in.Taken))
	}
	{
		const prefix string = ",\"lastupdate\":"
		out.RawString(prefix)
		out.String(string(in.Lastupdate))
	}
	out.RawByte('}')
}
func easyjson1c889379Decode3(in *jlexer.Lexer, out *struct {
	Iconfarm   int64  `json:"iconfarm"`
	Iconserver string `json:"iconserver"`
	Location   string `json:"location"`
	Nsid       string `json:"nsid"`
	PathAlias  string `json:"path_alias"`
	Realname   string `json:"realname"`
	Username   string `json:"username"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "iconfarm":
			out.Iconfarm = int64(in.Int64())
		case "iconserver":
			out.Iconserver = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "nsid":
			out.Nsid = string(in.String())
		case "path_alias":
			out.PathAlias = string(in.String())
		case "realname":
			out.Realname = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode3(out *jwriter.Writer, in struct {
	Iconfarm   int64  `json:"iconfarm"`
	Iconserver string `json:"iconserver"`
	Location   string `json:"location"`
	Nsid       string `json:"nsid"`
	PathAlias  string `json:"path_alias"`
	Realname   string `json:"realname"`
	Username   string `json:"username"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"iconfarm\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Iconfarm))
	}
	{
		const prefix string = ",\"iconserver\":"
		out.RawString(prefix)
		out.String(string(in.Iconserver))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"nsid\":"
		out.RawString(prefix)
		out.String(string(in.Nsid))
	}
	{
		const prefix string = ",\"path_alias\":"
		out.RawString(prefix)
		out.String(string(in.PathAlias))
	}
	{
		const prefix string = ",\"realname\":"
		out.RawString(prefix)
		out.String(string(in.Realname))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct13(in *jlexer.Lexer, out *Photos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			out.Page = string(in.String())
		case "pages":
			out.Pages = int64(in.Int64())
		case "perpage":
			out.Perpage = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make([]Photo, 0, 1)
					} else {
						out.Photo = []Photo{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Photo
					(v16).UnmarshalEasyJSON(in)
					out.Photo = append(out.Photo, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct13(out *jwriter.Writer, in Photos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix[1:])
		out.String(string(in.Page))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int64(int64(in.Pages))
	}
	{
		const prefix string = ",\"perpage\":"
		out.RawString(prefix)
		out.Int64(int64(in.Perpage))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Photo {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Photos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Photos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Photos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Photos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct13(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct14(in *jlexer.Lexer, out *PhotoSizes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sizes":
			easyjson1c889379Decode5(in, &out.Sizes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct14(out *jwriter.Writer, in PhotoSizes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix[1:])
		easyjson1c889379Encode5(out, in.Sizes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoSizes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoSizes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoSizes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoSizes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct14(l, v)
}
func easyjson1c889379Decode5(in *jlexer.Lexer, out *struct {
	Canblog     int64       `json:"canblog"`
	Candownload int64       `json:"candownload"`
	Canprint    int64       `json:"canprint"`
	Size        []PhotoSize `json:"size"`
	Stat        string      `json:"stat"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "canblog":
			out.Canblog = int64(in.Int64())
		case "candownload":
			out.Candownload = int64(in.Int64())
		case "canprint":
			out.Canprint = int64(in.Int64())
		case "size":
			if in.IsNull() {
				in.Skip()
				out.Size = nil
			} else {
				in.Delim('[')
				if out.Size == nil {
					if !in.IsDelim(']') {
						out.Size = make([]PhotoSize, 0, 1)
					} else {
						out.Size = []PhotoSize{}
					}
				} else {
					out.Size = (out.Size)[:0]
				}
				for !in.IsDelim(']') {
					var v19 PhotoSize
					(v19).UnmarshalEasyJSON(in)
					out.Size = append(out.Size, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stat":
			out.Stat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode5(out *jwriter.Writer, in struct {
	Canblog     int64       `json:"canblog"`
	Candownload int64       `json:"candownload"`
	Canprint    int64       `json:"canprint"`
	Size        []PhotoSize `json:"size"`
	Stat        string      `json:"stat"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"canblog\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Canblog))
	}
	{
		const prefix string = ",\"candownload\":"
		out.RawString(prefix)
		out.Int64(int64(in.Candownload))
	}
	{
		const prefix string = ",\"canprint\":"
		out.RawString(prefix)
		out.Int64(int64(in.Canprint))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		if in.Size == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Size {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	out.RawByte('}')
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct15(in *jlexer.Lexer, out *PhotoSize) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "label":
			out.Label = string(in.String())
		case "width":
			out.Width = in.JsonNumber()
		case "height":
			out.Height = in.JsonNumber()
		case "source":
			out.Source = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "media":
			out.Media = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct15(out *jwriter.Writer, in PhotoSize) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix[1:])
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.String(string(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.String(string(in.Height))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		out.String(string(in.Media))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoSize) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoSize) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoSize) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoSize) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct15(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct16(in *jlexer.Lexer, out *Photo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "secret":
			out.Secret = string(in.String())
		case "server":
			out.Server = string(in.String())
		case "farm":
			out.Farm = int64(in.Int64())
		case "ispublic":
			out.Ispublic = int64(in.Int64())
		case "isfriend":
			out.Isfriend = int64(in.Int64())
		case "isfamily":
			out.Isfamily = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct16(out *jwriter.Writer, in Photo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix)
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"farm\":"
		out.RawString(prefix)
		out.Int64(int64(in.Farm))
	}
	{
		const prefix string = ",\"ispublic\":"
		out.RawString(prefix)
		out.Int64(int64(in.Ispublic))
	}
	{
		const prefix string = ",\"isfriend\":"
		out.RawString(prefix)
		out.Int64(int64(in.Isfriend))
	}
	{
		const prefix string = ",\"isfamily\":"
		out.RawString(prefix)
		out.Int64(int64(in.Isfamily))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Photo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Photo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Photo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Photo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct16(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct17(in *jlexer.Lexer, out *PeopleGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nsid":
			out.Nsid = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "iconfarm":
			out.Iconfarm = int(in.Int())
		case "iconserver":
			out.Iconserver = string(in.String())
		case "admin":
			out.Admin = int(in.Int())
		case "eighteenplus":
			out.Eighteenplus = int(in.Int())
		case "invitation_only":
			out.InvitationOnly = int(in.Int())
		case "members":
			out.Members = string(in.String())
		case "pool_count":
			out.PoolCount = string(in.String())
		case "is_member":
			out.IsMember = int(in.Int())
		case "is_moderator":
			out.IsModerator = int(in.Int())
		case "is_admin":
			out.IsAdmin = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct17(out *jwriter.Writer, in PeopleGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nsid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Nsid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"iconfarm\":"
		out.RawString(prefix)
		out.Int(int(in.Iconfarm))
	}
	{
		const prefix string = ",\"iconserver\":"
		out.RawString(prefix)
		out.String(string(in.Iconserver))
	}
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix)
		out.Int(int(in.Admin))
	}
	{
		const prefix string = ",\"eighteenplus\":"
		out.RawString(prefix)
		out.Int(int(in.Eighteenplus))
	}
	{
		const prefix string = ",\"invitation_only\":"
		out.RawString(prefix)
		out.Int(int(in.InvitationOnly))
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		out.String(string(in.Members))
	}
	{
		const prefix string = ",\"pool_count\":"
		out.RawString(prefix)
		out.String(string(in.PoolCount))
	}
	{
		const prefix string = ",\"is_member\":"
		out.RawString(prefix)
		out.Int(int(in.IsMember))
	}
	{
		const prefix string = ",\"is_moderator\":"
		out.RawString(prefix)
		out.Int(int(in.IsModerator))
	}
	{
		const prefix string = ",\"is_admin\":"
		out.RawString(prefix)
		out.Int(int(in.IsAdmin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PeopleGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PeopleGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PeopleGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PeopleGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct17(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct18(in *jlexer.Lexer, out *PeopleGetGroups) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			easyjson1c889379Decode6(in, &out.Groups)
		case "stat":
			out.Stat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct18(out *jwriter.Writer, in PeopleGetGroups) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix[1:])
		easyjson1c889379Encode6(out, in.Groups)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PeopleGetGroups) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PeopleGetGroups) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PeopleGetGroups) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PeopleGetGroups) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct18(l, v)
}
func easyjson1c889379Decode6(in *jlexer.Lexer, out *struct {
	Group []PeopleGroup `json:"group"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				in.Delim('[')
				if out.Group == nil {
					if !in.IsDelim(']') {
						out.Group = make([]PeopleGroup, 0, 1)
					} else {
						out.Group = []PeopleGroup{}
					}
				} else {
					out.Group = (out.Group)[:0]
				}
				for !in.IsDelim(']') {
					var v22 PeopleGroup
					(v22).UnmarshalEasyJSON(in)
					out.Group = append(out.Group, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode6(out *jwriter.Writer, in struct {
	Group []PeopleGroup `json:"group"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		if in.Group == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Group {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct19(in *jlexer.Lexer, out *PeopleFindBy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			easyjson1c889379Decode7(in, &out.User)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct19(out *jwriter.Writer, in PeopleFindBy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		easyjson1c889379Encode7(out, in.User)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PeopleFindBy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PeopleFindBy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PeopleFindBy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PeopleFindBy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct19(l, v)
}
func easyjson1c889379Decode7(in *jlexer.Lexer, out *struct {
	ID       string `json:"id"`
	Nsid     string `json:"nsid"`
	Username struct {
		Content string `json:"_content"`
	} `json:"username"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "nsid":
			out.Nsid = string(in.String())
		case "username":
			easyjson1c889379Decode8(in, &out.Username)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode7(out *jwriter.Writer, in struct {
	ID       string `json:"id"`
	Nsid     string `json:"nsid"`
	Username struct {
		Content string `json:"_content"`
	} `json:"username"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"nsid\":"
		out.RawString(prefix)
		out.String(string(in.Nsid))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		easyjson1c889379Encode8(out, in.Username)
	}
	out.RawByte('}')
}
func easyjson1c889379Decode8(in *jlexer.Lexer, out *struct {
	Content string `json:"_content"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode8(out *jwriter.Writer, in struct {
	Content string `json:"_content"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	out.RawByte('}')
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct20(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latitude":
			out.Latitude = string(in.String())
		case "longitude":
			out.Longitude = string(in.String())
		case "accuracy":
			out.Accuracy = string(in.String())
		case "context":
			out.Context = string(in.String())
		case "place_id":
			out.PlaceID = string(in.String())
		case "woeid":
			out.Woeid = string(in.String())
		case "neighbourhood":
			(out.Neighbourhood).UnmarshalEasyJSON(in)
		case "locality":
			(out.Locality).UnmarshalEasyJSON(in)
		case "county":
			(out.County).UnmarshalEasyJSON(in)
		case "region":
			(out.Region).UnmarshalEasyJSON(in)
		case "country":
			(out.Country).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct20(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix[1:])
		out.String(string(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.String(string(in.Longitude))
	}
	{
		const prefix string = ",\"accuracy\":"
		out.RawString(prefix)
		out.String(string(in.Accuracy))
	}
	{
		const prefix string = ",\"context\":"
		out.RawString(prefix)
		out.String(string(in.Context))
	}
	{
		const prefix string = ",\"place_id\":"
		out.RawString(prefix)
		out.String(string(in.PlaceID))
	}
	{
		const prefix string = ",\"woeid\":"
		out.RawString(prefix)
		out.String(string(in.Woeid))
	}
	{
		const prefix string = ",\"neighbourhood\":"
		out.RawString(prefix)
		(in.Neighbourhood).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"locality\":"
		out.RawString(prefix)
		(in.Locality).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"county\":"
		out.RawString(prefix)
		(in.County).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		(in.Region).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		(in.Country).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct20(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct21(in *jlexer.Lexer, out *License) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct21(out *jwriter.Writer, in License) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v License) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v License) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *License) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *License) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct21(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct22(in *jlexer.Lexer, out *GroupsGetInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			(out.Group).UnmarshalEasyJSON(in)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct22(out *jwriter.Writer, in GroupsGetInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		(in.Group).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupsGetInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupsGetInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupsGetInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupsGetInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct22(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct23(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "path_alias":
			out.PathAlias = string(in.String())
		case "iconserver":
			out.IconServer = string(in.String())
		case "lang":
			out.Lang = string(in.String())
		case "ispoolmoderated":
			out.Ispoolmoderated = int(in.Int())
		case "iconfarm":
			out.IconFarm = int(in.Int())
		case "name":
			(out.Name).UnmarshalEasyJSON(in)
		case "description":
			(out.Description).UnmarshalEasyJSON(in)
		case "members":
			(out.Members).UnmarshalEasyJSON(in)
		case "pool_count":
			(out.Poolcount).UnmarshalEasyJSON(in)
		case "topic_count":
			(out.Topiccount).UnmarshalEasyJSON(in)
		case "privacy":
			(out.Privacy).UnmarshalEasyJSON(in)
		case "blast":
			easyjson1c889379Decode9(in, &out.Blast)
		case "throttle":
			easyjson1c889379Decode10(in, &out.Throttle)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct23(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"path_alias\":"
		out.RawString(prefix)
		out.String(string(in.PathAlias))
	}
	{
		const prefix string = ",\"iconserver\":"
		out.RawString(prefix)
		out.String(string(in.IconServer))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"ispoolmoderated\":"
		out.RawString(prefix)
		out.Int(int(in.Ispoolmoderated))
	}
	{
		const prefix string = ",\"iconfarm\":"
		out.RawString(prefix)
		out.Int(int(in.IconFarm))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		(in.Name).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		(in.Description).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		(in.Members).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"pool_count\":"
		out.RawString(prefix)
		(in.Poolcount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"topic_count\":"
		out.RawString(prefix)
		(in.Topiccount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"privacy\":"
		out.RawString(prefix)
		(in.Privacy).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"blast\":"
		out.RawString(prefix)
		easyjson1c889379Encode9(out, in.Blast)
	}
	{
		const prefix string = ",\"throttle\":"
		out.RawString(prefix)
		easyjson1c889379Encode10(out, in.Throttle)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct23(l, v)
}
func easyjson1c889379Decode10(in *jlexer.Lexer, out *struct {
	Count     int64  `json:"count,string"`
	Mode      string `json:"mode"`
	Remaining int64  `json:"remaining"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64Str())
		case "mode":
			out.Mode = string(in.String())
		case "remaining":
			out.Remaining = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode10(out *jwriter.Writer, in struct {
	Count     int64  `json:"count,string"`
	Mode      string `json:"mode"`
	Remaining int64  `json:"remaining"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.Count))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"remaining\":"
		out.RawString(prefix)
		out.Int64(int64(in.Remaining))
	}
	out.RawByte('}')
}
func easyjson1c889379Decode9(in *jlexer.Lexer, out *struct {
	Content        string `json:"_content"`
	DateBlastAdded string `json:"date_blast_added"`
	UserID         string `json:"user_id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_content":
			out.Content = string(in.String())
		case "date_blast_added":
			out.DateBlastAdded = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379Encode9(out *jwriter.Writer, in struct {
	Content        string `json:"_content"`
	DateBlastAdded string `json:"date_blast_added"`
	UserID         string `json:"user_id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"date_blast_added\":"
		out.RawString(prefix)
		out.String(string(in.DateBlastAdded))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	out.RawByte('}')
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct24(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct24(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Content) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Content) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Content) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Content) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct24(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct25(in *jlexer.Lexer, out *Common) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct25(out *jwriter.Writer, in Common) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix[1:])
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Common) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Common) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Common) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Common) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct25(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct26(in *jlexer.Lexer, out *AuthGetToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auth":
			(out.Auth).UnmarshalEasyJSON(in)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct26(out *jwriter.Writer, in AuthGetToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"auth\":"
		out.RawString(prefix[1:])
		(in.Auth).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthGetToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthGetToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthGetToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthGetToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct26(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct27(in *jlexer.Lexer, out *AuthGetFrob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "frob":
			(out.Frob).UnmarshalEasyJSON(in)
		case "stat":
			out.Stat = string(in.String())
		case "code":
			out.Code = int64(in.Int64())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct27(out *jwriter.Writer, in AuthGetFrob) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"frob\":"
		out.RawString(prefix[1:])
		(in.Frob).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		out.String(string(in.Stat))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int64(int64(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthGetFrob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthGetFrob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthGetFrob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthGetFrob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct27(l, v)
}
func easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct28(in *jlexer.Lexer, out *Auth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			(out.Token).UnmarshalEasyJSON(in)
		case "perms":
			(out.Perms).UnmarshalEasyJSON(in)
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct28(out *jwriter.Writer, in Auth) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		(in.Token).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"perms\":"
		out.RawString(prefix)
		(in.Perms).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Auth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Auth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c889379EncodeGithubComToomoreLazyflickrgoJsonstruct28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Auth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Auth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c889379DecodeGithubComToomoreLazyflickrgoJsonstruct28(l, v)
}
